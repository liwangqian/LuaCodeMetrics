'use strict';

const Promise = require('bluebird');
const escomplex = require('escomplex');
const luaparse = require('luaparse');
const walker = require('./walker');
const fs = require('fs');

const readFileAsync = Promise.promisify(fs.readFile, fs);

/**
 * Analysis the code metrics for one module
 * @param {String} filePath The path of the module file.
 * @param {Object} tree [Optional] The abstract syntax tree of the module, 
 * generated by luaparse with `locations` enable
 * @returns {Object} The report of the module if anaysis success
 */
exports.module = (filePath, tree) => {
    return analyseModule(filePath, tree)
        .then(report => {
            return {
                path: filePath,
                lineCount: report.aggregate.sloc.logical,
                complexity: report.aggregate.cyclomatic,
                maintainability: Math.round(report.aggregate.halstead.effort),
                functionCount: report.functions.length,
                halstead: {
                    length: report.aggregate.halstead.length,
                    vocabulary: Math.round(report.aggregate.halstead.vocabulary),
                    difficulty: Math.round(report.aggregate.halstead.difficulty),
                    bugs: Math.round(report.aggregate.halstead.bugs)
                },
                functions: report.functions
            };
        });
}

function analyseModule(filePath, tree) {
    if (tree) {
        return Promise.resolve(escomplex.analyse(tree, walker));
    } else {
        return readFileAsync(filePath, 'utf8')
            .then(data => {
                return escomplex.analyse(
                    luaparse.parse(data, { locations: true, comments: false }),
                    walker
                );
            });
    }
}

/**
 * Analysis the code metrics for project files
 * @param {String} filesPath The path of the project files.
 * @returns {Object} The reports of the project if anaysis success
 */
exports.project = (filesPath) => {
    return analyseProject(filesPath);
}

function analyseProject(filesPath) {
    if (!Array.isArray(filesPath)) {
        return Promise.reject("param 'filesPath' is not an Array!");
    }

    let jobs = filesPath.map(filePath => {
        return readFileAsync(filePath, 'utf8')
            .then(data => {
                return {
                    path: filePath,
                    ast: luaparse.parse(data, { locations: true, comments: false })
                }
            });
    });
    return Promise.all(jobs)
        .then(modules => {
            return escomplex.analyse(modules, walker);
        });
}
